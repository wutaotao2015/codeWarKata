vim操作
	undo/Redo
	u -> undo
	<C-r> -> redo vim 撤销u的操作
	打开/保存/退出/改变文件（buffer)
	:e <path/to/file> 打开一个文件
	 ：w 存盘
	 ：saveas <path/to/file> 另存为
	 :x, ZZ, :wq  保存并退出（：x 表示仅在需要时保存，
	 ZZ不需要输入冒号并回车）
	 ：q!  退出不保存 ：qa! 强行退出所有的正在编辑的文件，
	 就算别的文件有更改。
	 ：bn 和 ：bp ->  你可以同时打开很多文件，使用
	 这两个命令来切换下一个或上一个文件。
	 花点时间熟悉一下上面的命令，一旦你掌握他们了，
	 你就可以干其他编辑器都能干的事了。
	 但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没
	 关系，你可以进阶到第三级了。

第三级 - 更好，更强，更快
	先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。
	在第三级，我们只谈那些和vi可以兼容的命令。
更好
	下面，让我们看一下vim是怎么重复自己的：
	1. .  小数点 可以重复上一次的命令
	2. N<command> 重复某个命令N次
	下面是一个示例，打开一个文件你可以试试下面的命令：
	2dd  删除2行
	3p  粘贴文本3次
	100idesu[esc] 重复插入desu100次
	. 重复上一个命令 100desu
	3. 重复3次“desu" 而不是300

更强
	你要让你的光标移动更有效率，你一定要了解下面的这些命令，千万别跳过
	N G 到第N行 一般写：137
	gg 到第一行
	G 到最后一行
	按单词移动：
	1： w 到下一个单词的开头
	2： e 到下一个单词的结尾
	默认的单词由小写的e,w  默认单词由字母，数字，下划线组成
	如果单词划分由blank字符（空格，tab,换行，回车等）区分，
	则需要使用大写的E和W.
	下面，让我来说说最强的光标移动：
	%  匹配括号移动，包括（，{，[
	* 和 #： 匹配光标当前所在的单词，移动光标到下一个（或上一个）
	匹配单词（*是下一个，#是上一个）
	相信我，上面这三个命令对程序员来说是相当强大的。

更快
	你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令
	连动。很多命令都可以如下来干：
	<开始位置>命令<结束位置>
	例如0y$命令意味着：
	0 先到行头
	y 从这里开始拷贝
	$ 拷贝到本行最后一个字符

	注意： 0 ， y , $是三个命令vim分别执行的
	可以输入ye,从当前位置拷贝到本单词的最后一个字符。

	你也可以输入y2/foo来拷贝2个”foo"之间的字符串。

	还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：
	d :删除
	v: 可视化的选择
	gU: 变大写
	gu: 变小写
	等等

vim操作记忆
	x 删除当前光标单个字符 = dl
	X 删除左边一个字符 = dh
	D 删除到行尾 = d$
	C 修改到行尾 = c$
	s 修改一个字符 = cl
	S 修改一行 = cc
	r 替换一个字符，类似修改，但不进入insert模式

	(终端清除刚输入的命令ctrl+u到行首，ctrl+k到行尾,ctrl+w可以向前删除一个单词）
	 (iterm切换窗口快捷键ctrl + n)

	 查找 / ? n N * # (*#使用了词首和词尾进行区分)
	 /\<the\> 匹配单独的单词the
	 %会自动查找到(),[],{},进行匹配
	 gg是文件头，G是文件尾
	 而视野中的光标跳转为H(Home),M(middle),L(last)


	 标记 用完G后，跳回原位，可以用单引号''跳到上次光标停留的位置
	 光标跳转到本行以外的地方称为一次跳转，
	 (如G,gg,/,n,但j,k,w,e,fx,tx都不是跳转
	  fx表示在本行向光标右边查找字符x
	  Fx与fx方向相反
	  tx表示在本行向光标右边查找字符x,光标停在x前的一个字符处,t即to
	  Tx与tx方向相反
	  可以通过命令;重复查找，命令,反向重复)

	 .会重复最后一次修改操作
	 如f< df> f< . f< .即可以重复删除<>的标签内容
	 u是撤销，ctrl+r重做
	 可视模式v,V,ctrl+v
	 可视模式下可以按o在已选择块中进行光标跳转，从而实现双向选择
	 p会将内容粘贴到光标的下一行
	 P与p相反，内容会被粘贴到上一行
	 (交换2个字符 xp)
	 除了操作符如x,c,s,r和可视模式外,还有第3种修改的方法：
	 文本对象
	 daw 删除一个单词，aw = A word 即delete A word
	 光标在单词中间也可以删除，即它是对光标所在的文本对象进行操作
	 diw 删除一个单词，但不包括空白符
	 它是作为一个整体，光标的位置是无所谓的
	 IS = INNER SENTENCE
	 如cis 会修改一个句子，它不包括句子后的空白符
	 as也是所在的句子，但它包括空白符，das即可删除该句子，包括空白符
	 R可以转换成替换模式

.vimrc文件配置
	set ruler 光标所在页面百分比和位置
	backspace 插入模式下可以用删除键
	autoread vim外修改了文件自动加载
	history 命令行历史命令记录数
	noswapfile 去掉swapfile
	autoindent 自动缩进
	nowrap 去掉自动换行
	scrolloff=8 向下滚动时离底线8行即开始滚动
	incsearch 正向搜索
	hlsearch 高亮搜索
	ignorecase 搜索时忽略大小写
	hidden 不退出buffer切换buffer?
	syntax on 语法高亮
	helplang=cn 帮助文档变成中文

	同时编辑多个文件
	可以用:next切换文件
	可以用ctrl+^键进行快速切换文件
	利用标记
	'"可以回到离开该文件的位置
	'.可以回到该文件最后的修改位置

	vim -R file以只读模式打开文件,但它仍然可以用!覆盖
	vim -M file就是只读，此时想修改需要执行set modifiable, set write(没有绝对不能改的。。。）
	这样看，还是-R就够了。

	用:%s/four/4/g可以替换four为4，%表示在所有行中执行替换
	/g表示找到的匹配全部替换，即全局的，和perl相似
	单词统计：g,Ctrl+g

	ctrl+p 自动补全
	ctrl+o 可以在插入模式中执行一次普通模式下的命令，执行完后仍然停留在插入模式中，
	可以用来删除某几行或修改,或者存进寄存器,或者进入可视模式。
	总体来说，还是用D删除到行尾或dd直接删除这一行（效果同S).
	ctrl+o,j 也非常好用

折叠
	zfap  zf=z folder ap 创建一个折叠
	zo    z open 打开一个折叠
	zc    z close 关闭一个折叠
	zi    打开或关闭所有折叠
	za    打开光标所在折叠
	zA    递归打开光标所在折叠

	:set foldmethod=indent
	:set foldlevel=0 代表所有fold都会折叠
    ,w 代表:w! 可以不退出快速保存
    在可视模式下按*或#可以查找选中的块内容
    ,enter(CR)可以在搜索完后去除高亮

git命令
        git diff  显示工作区和仓库的区别
	git status 显示当前git状态
	status:
	untracked, unmodified, modified, staged
	修改完后需要暂存变成已暂存状态才能进行提交，用-am可以跳过暂存状态
	git pull 拉代码
	git commit -am "注释"  不暂存直接提交，-m是注释
	git push   推送
	git commit 本身是将暂存的文件提交  -a 是add的缩写 -m 是message的缩写
	git add 可以将未跟踪的文件进行跟踪，也可以将已经跟踪的文件进行暂存
    git mv 重命名文件或目录

翻页
        ctrl+f forward  向后翻一页
	ctrl+b backward向前翻一页
	tab键用不了了。。。
	ctrl+d down  向下翻半页
	ctrl+u up    向上翻半夜
	zz   光标所在行居中
	zt  top 光标所在行移动到第一行
	zb  bottom 光标所在行移动到最后一行
vim

   临时退出vim
    ctrl+z 可以临时退出到shell环境,它将vim放入后台，
    执行操作完成后，可以按fg将vim返回前台，重新进入vim
    (也可以:shell命令退出，exit命令返回),不过ctrl+z,fg更简洁
    linux下我们如果想一个任务或者程序还后台执行可以使用&，实际上linux还提供了其他任务调度的命令。
    bg(background)
    将一个在后台暂停的命令，变成继续执行
    fg(foreground)
    将后台中的命令调至前台继续运行
    jobs
    查看当前有多少在后台运行的命令
    ctrl + z
    可以将一个正在前台执行的命令放到后台，并且暂停
    nohup 命令(no hang up)
    用途：不挂断地运行命令。

    命令 vc = cd codeKataWar/test
    vr = .vim_runtime/

    直接执行vim,可以看到nerdTree
    t是打开新tab,并跳转过去
    T是打开新tab,不跳过去
    (gt是到下一个tab
     gT是到前一个tab
     1gt是到第一个tab,2gt是到第2个tab,...)
    用,o切换buffer来切换tab更快

    vim中一个tab对应着一个buffer,
    而一个tab中的多个窗口(split)可以同时编辑一个buffer,一个窗口的修改会同步到别的窗口中

    这跟eclipse和idea是一样的
    横向分割命令:sp
    纵向分割命令:vs
    用ctrl+h,j,k,l可以在窗口间移动(vimrc已经配置好)

    ,tm 0是将当前tab移动到第一个， ,tm 1是移到第2个tab
    :q或:close或,tc关闭当前tab
    ,to 只留下当前tab, tab only,其他tab都被关闭
    :wa可以一次保存所有buffer的改动并继续工作
    :xa可以保存所有改动并退出vim
    :wa和:xa只有文件有改动时才会进行操作，而:w不管是否变动都会改变
    leader+w = :w! 即强制写入

   ack.vim
    在命令行使用ack命令(无效，vim中弃用,只能在shell中使用)
   bufexplorer
    ,o
    快速切换buffer,不要在nerdTree内使用，选择需要的buffer回车即可,
    省去了切换tab的麻烦
   ctrlp
    ,j
    进入ctrlp,当前工作目录可以在nerdTree上用cd命令更改
    进入ctrlp后，可以用ctrl+f或ctrl+b切换到文件file,buffer,mru(most recently used)3种模式
    ctrl+r在以上3种模式的基础上增加是否支持正则表达式的功能
    ctrl+d在以上3中模式的基础上决定输入的字符串匹配的是路径Path还是文件名file

    ctrlp相当于补充了nerdTree的查找文件功能，类似windows中的everything
    nerdTree的nerdFind只是在当前tab中打开nerdTree，也就是说,nn = ,nf

    Best Practice
        即可以打开终端后，输入vim,在nerdTree中直接输入,f进入mru,选择一个文件打开后，
        使用:only命令关闭右侧的空split窗口

        (也打开nerdTree中的任意一个文件，进入右边vim编辑窗口，
        按,j进入ctrlp页面，可以按ctrl+b进入mru或file模式（此时buffer为空）
        按需打开ctrl+r和ctrl+d,找到需要的文件后，(或,f打开mru文件)ctrl+j,k后回车打开)

        再按,nf定位到nerdTree,可以查看具体路径位置，可以按U在保持当前目录打开
        状态情况下将根目录向上提高一层，按需提升

   goyo和zenroom2
    ,z
    进入专心编写模式，排除边框,tab等所有干扰
   lightline.vim
    需要在my_config.vim中加入set shownomode，状态栏和默认的insert模式等重复了
   NerdTree
    以上已经够多，主要是2个功能，U升级根目录和定位,nf
    有个小问题：当文件在外部更新后，在nerdTree上按r或R刷新后，
    需要关闭原来的tab,即旧buffer,开启新buffer才能看到更新
   mru.vim
    ,f
    most recently files,如果是编辑最近做过的文件，
    在打开任意vim文件后，不用,j走ctrlp,直接,f
   open_file_under_cursor
    相当于go to file命令，可以用nerdTree的cd功能改变cwd,但文件会在nerdTree中打开，弃用
    (不用nerdTree，可以用:pwd查看当前路径，然后用:cd %:p:h命令即可将cwd切换到该路径下)
   pathogen.vim
    vim的插件管理包，不需要改动
   snipmate.vim
    按tab自动补全工具，plugin里也有java的部分
    有for,gs(getter,setter方法),if,log(sysout),m(method)
    这边作用有限，可以自己定义
   ale
    asynchronous lint engin 代码扫描工具
    配制中有let g:ale_lint_on_text_changed = 'never'说明只有保存代码时才会检查，提高了性能
    (亲测java保存有效，但离ide还是相距较远)
   vim-commentary
    注释代码用,gcc注释一行，gcu打开注释，gc注释选中的块
   vim-expand-region
    + or -
    按语法智能选择，和eclipse,idea中一样，syntax aware selection
    +是扩大选择范围，-是减小选择范围
    选择时会自动进入可视模式
   vim-fugitive
    集成git到vim的工具
    :Git!
        它可以执行任何原生git命令，
        如:Git! status相当于执行git status并且在一个临时窗口显示命令执行结果
    :Gstatus
        在弹出的状态栏里，可以对每一个修改过的文件进行操作，类似idea中的versionControl栏一样
        D  :Gdiff    显示不同
        O  :Gtabedit 在新tab中进行编辑
        q  close status 退出当前status窗口

        cc :Gcommit  提交
        U  总体是回退的意思，默认checkout,
           对于已暂存staged files是恢复到head,未跟踪文件clean,
           未合并文件rm(remove files from worktree and index)
        -  应该只用来对not staged files使用,add
           对于not staged files会add,已经staged的会reset
        o  :Gsplit   在新窗口中打开
        S  :Gvsplit  打开竖屏分割窗口
        r  reload status 刷新status
    :Gcommit
        即提交，它会自动弹出一个split注释提示框,填写完后用:wq即可提交
    :Grebase
        同git rebase
    :Gfetch
    :Gmerge
        拉取远程代码和合并，git pull = git fetch + git merge合并成功时也会弹出注释提示框
    :Gpull
        git pull拉取
    :Gpush
        git push
    :Glog
        默认是记录当前文件的提交记录(弃用)。
        带参数--可以查看所有文件的commit提交历史记录,相当于查看仓库的变化。
        在弹出的窗口中选择一项回车可以查看具体提交信息
        用命令:copen可以将结果放入quicklist中，可以上下移动查看过往提交记录
        用命令:cnext,:cprev,:cfirst,:clast可以新增tab查看提交记录详情
        安装插件vim-unimpaired后，可以
        [q = :cprev, ]q = :cnext
        [Q = :cfirst, ]Q = :class
        [<Space> 可以向上空一行
        ]<Space>向下空一行
        [e 和 ]e可以上下移动当前行

        安装vim-unimpared插件执行命令
        git clone https://tpope.io/vim/unimpaired.git my_plugins/unimpaired
        即可，重启终端后可以看到效果

    :Gdiff
        查看不同,集成了vim的diff功能,不好用，弃用,用原生的:Git! diff head
    :Gmove
        同git mv命令，可以重命名
    :Gblame
        可以查看文件中每行的改动记录，还有很多配置项可以进行进一步操作

    Best Practice

        (拉取代码后有冲突还是要把自己本地的改动备份好，查看自己的改动用Glog --
        再在gitStatus里U回退一切未提交的东西,
        再用:Git! reset --hard head^回退到上一个版本 或指定SHA值回退到特定版本)
        再进行拉取Gpull操作后，将自己本地的看情况小心还原，不能覆盖别人的改动.
        最后再进行提交即可

        1. 本地开发代码先用:Gwrite暂存，不提交，可以用:Gstatus查看文件状态
            用:Git! diff head确认改动或者在status的窗口中用D查看改动
        2. 用:Gfetch命令拉取远程代码
        3. 用:Git! diff master origin/master（可以tab提示）查看别人的改动。
        4. 与本地有冲突可以及时修改，有问题时使用:Gmerge会报错，此时git会提示
            你需要commit或stash,
            stage是暂存，是提交commit前必须经过的一步
            stash是相当于一个栈，当你开发了一半的内容不想提交而又有新任务时时，可以
                使用git stash命令还原一个clean work tree.
                开发完后使用git stash pop还原以前开发的内容，有冲突git会提示出来。
                可以使用git stash list/show查看stash的内容
            已经暂存stage的文件也会被stash起来
            一般还是避免使用stash
            git stash apply命令会保存stash备份
            git stash pop命令会弹出stash,同时删除相应记录
            git stash list可以查看stash列表
            当apply或pop时默认内容全部为unstaged状态，弹出时加上--index选项可以恢复index文件，
            即stash前的stage暂存状态

            git diff            查看work tree和stage区的区别
            git diff head       查看work tree和仓库的区别
            git diff --cached   查看stage区和仓库的区别
            其中暂存后，work tree和stage的数据一致了，所以:Gwrite后
            可以同时用git diff head和git diff --cachee查看不同

           解决问题后使用:Gmerge拉取代码,拉取完后gitStatus上会显示up to date with 'origin master'
        5. 用:Gcommit进行提交
        6. 用:Gpush推送

        为什么需要stage暂存区？

        可以把提交的内容分开，因为提交只会提交暂存区中的内容(index文件),比如在实现功能时修改了以前的一个bug,
        可以暂存这个bug先提交，这样就更清晰，便于管理。可以用git diff --cache查看即将要
        提交的内容是否正确。

        git原生命令
        移除未追踪文件 git clean -f
        暂存文件不暂存了，回复到workTree   git reset
        本地修改都不要了,全部去除         git checkout (Gstatus中的U命令)
        已经提交的东西想回退               git revert

        经测试，使用reset时，若原来已经stage的文件和本地仓库后来修改的内容有冲突时，
        reset后直接以本地work tree的内容为准，即原来stage的内容丢失了
        所以需要慎重reset,reset前需保证work tree clean

   vim-indent-object
    ii, ai, aI
    可视模式下的相同缩进级别的语句块选择
    ii可以选择同一级别的
    ai除了同一级别，还有上一行也会被选中
    aI除了同一级别，上一行和下一行都会被选中
    (python很有用，java用+,-智能选择更好)
   vim-multiple-cursors
    不好用
    多个光标同时选择的工具，ctrl+n开始选择，再按ctrl+n可以选下一个
    目前只能选择2个，弃用，可以用正则表达式代替
   vim-yankstack
    ctrl,p and ctrl,n
    剪切历史板，
    ctrl,p  previous,older paste record
    ctrl,n  newer paste record
   vim-zenroom2
    ,z
    上面已经提到goyo,用,z即可进入纯净编写空间


iVim

    vim for ios

    1. File System
        由于ios的沙盒系统，用户产生的内容在data目录下的document目录中，所以它就是iVim的$HOME目录

        document目录下的子目录Inbox是存储别的app分享给iVim的文件，你不能在这个文件夹下创建文件。

        iVim有一个文件浏览器插件netrw,可以用:edit .来启动它，用:help netrw来查看帮助文档

        iVim支持Files app
        iVim可以通过ios-share编辑其他app的文本

    2. font management

        a. system fonts
            Source Code Pro 是iVim内置的
        b. user fonts
            可以通过share extension从其他app中导入ttf,otf字体

        the font commands
            :ifont 列出可用的字体列表并改变当前字体
            :ideletefont 可以删除用户自定义字体
            :help :ifont或 :help :deletefont可以查看具体信息
            只有monospace fonts是良好支持的

    3. extended keyboard

        the compact button
            中间的键是主要的，点击一下就可以，其他的需要把它向中间拖动才可以生效。
        the control key
            a. 按1下ctrl键，会让它处于one-off状态，一个C-组合后它会自动回复。
            b. 按2下ctrl键，合让它处于hold状态，一个C-组合后不会自动回复，直到再次点击才会回复，
                它方便于连续的C-组合键输入。
            c. 上面2种状态，轻点一下都会回复到初始状态。
        hide and show
            一个手指长按屏幕会隐藏扩展键盘，再长按会出现。
            默认是启动时出现，可以在ios-settings中修改成默认隐藏。
        Customize
            如果默认的按钮或键不喜欢，可以用命令:isetekbd修改。

    4. Multi-stage language support

        iVim支持输入中文或日语等多种语言。
        同搜狗输入法一样，输入的key会在光标上显示，候选词在键盘上方出现，选择后替代keys,这个会话就结束了。
        按esc键会取消当前的session,并且所有的输入keys都会被删除。
        轻点屏幕或按方向键将会结束当前session,已经存在的keys会被当成最后的输入结果。

        注意：
        a. 在非insert模式下按键会转化成普通字符。
        b. 在ios-dictation模式下多国家输入会失效。

    5. Dictation
        iVim 指出ios系统的听写输入
    6. Open Url

        在app间分享信息的一个办法是通过URL，你可以将信息放入一个URL中并打开它，
        然后系统会启动支持的app,并让它去处理这个url.

        Example:

            Url "https://"是被ios系统中的safari浏览器处理的。。。
            https://www.example.com/search?q={expand('<cword>')%[Q}
            可以查看app: Pin的url工作流教程。

        Include information
            通过使用vim表达式，你可以在url中添加动态信息，如剪切板内容，当前文件名或者是函数的结果。
            上面的{expand('<cword>')%[Q}就是一个变量名，
            它会在url被打开时被光标上的单词所替换，这样打开的网址搜索的内容就是光标上的单词了(相当于打开百度查单词)

            :iopenurl可以查看打开url的具体用法。
    7. share

        sharing makes iVim's editing power available to more apps.

        Importing
            a. share with iVim
                在可以分享的app中，当调用时，选中的文本会出现在一个悬浮框中，可以进行简单编辑，
                按Post可以打开iVim,文本会出现在一个新tab的新buffer中。
            b. copy to iVim
                它会复制被分享的文件到Document目录中，也会打开一个新tab展示该文件。
                如果已经有相同文件名的文件，它会被重命名以避免冲突。
            用命令:idocuments import命令可以从iCloud Drive或其他文档提供者那里获取文本文件，
            这样就可以不用离开iVim来进行导入了。
            导入的文件或文本都会在新tab中打开。
        Exporting
            用命令:ishare就可以分享文件或文本给其他app了。

        Editing in place

            :idocuments允许你直接在iCloud Drive或其他文档提供者中编辑文件。

            可以在document picker中打开目录，创建或重命名子目录或文件，删除文件等。
            不过只能通过vim的方式进行，如通过vim方法，命令等。（没什么用）
        Items in the share panel
            share with iVim
            copy to iVim
            open in iVim
                在iVim中直接编辑目标文件。
            iVim-old-documents
                命令:iolddocs可以打开以前用iVim打开过的文件或目录，相当于历史文件列表。

        用:help :ishare或:help :idocuments获取更多信息。

    8. Settings

        ios-settings
        Launch Option
        Extended Keyboard
            是否默认隐藏扩展键盘
        Hardware Keyboard
            a. 映射大写键
                如果外接了实体键盘，可以把它的大写键映射为esc或ctrl键，不过其中有需要注意的地方。
            b. 使alt能映射
                enabled后，它会把alt键映射为<A-组合键，否则，它会被ios系统当做外部符号输入。
        Dictation

    9. External keyboard

        a. ctrl可以变成<C-组合外，Command键会变为<D-组合。
        b. <D-s>,<D-h>和<D-.>是ios系统保留的组合，应该是不能使用。
        c. 可以将alt映射为<A-组合。
        d. esc,arrows,tab and enter同修饰键ctrl，command,alt and shift分别组合是可以的，
            但<C-CR>现在不生效了。
        e. 功能键F1失效了，因为API的限制。
        f. 多个修饰键组合如<D-C->是不支持的
        g. 可以将caps_lock键在ios-settings中映射为esc或ctrl键

        注意：因为api的限制，只支持英文键盘。

    10. Integrated Exuberant Ctags

        命令:ictags,可以编辑自己的配置文件.ctags放入home directory下，每次ctags调用时都会读取它。
        可以用:help :ictags查看具体信息

    11. Miscellanenous

        Touch support

            a. 单点轻点像鼠标左击一样，它可以改变光标位置(用h,j,k,l一般更好，不过句首句尾就方便了)
               切换window和选择特定tab

            b. 单个手指拖动可以选择文本(手机太小了，ipad大点选择方便一些),
                还可以改变window的大小，只要拖动该window的状态栏即可。

            c. 2个手指的拖动可以在一个window钟滚动文本。

            d. 1个手指长按是切换扩展键盘，2个手指长按是隐藏系统键盘，单点又会显示它。

        Autosave

            iVim不会自动保存打开的文件，所有未保存的变动都会在iVim终止的时候丢失。
            这是由于ios的终止app的方式决定的。


