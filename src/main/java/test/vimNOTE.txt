vim操作
	undo/Redo
	u -> undo
	<C-r> -> redo vim 撤销u的操作
	打开/保存/退出/改变文件（buffer)
	:e <path/to/file> 打开一个文件
	 ：w 存盘
	 ：saveas <path/to/file> 另存为
	 :x, ZZ, :wq  保存并退出（：x 表示仅在需要时保存，
	 ZZ不需要输入冒号并回车）
	 ：q!  退出不保存 ：qa! 强行退出所有的正在编辑的文件，
	 就算别的文件有更改。
	 ：bn 和 ：bp ->  你可以同时打开很多文件，使用
	 这两个命令来切换下一个或上一个文件。
	 花点时间熟悉一下上面的命令，一旦你掌握他们了，
	 你就可以干其他编辑器都能干的事了。
	 但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没
	 关系，你可以进阶到第三级了。

第三级 - 更好，更强，更快
	先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。
	在第三级，我们只谈那些和vi可以兼容的命令。
更好
	下面，让我们看一下vim是怎么重复自己的：
	1. .  小数点 可以重复上一次的命令
	2. N<command> 重复某个命令N次
	下面是一个示例，打开一个文件你可以试试下面的命令：
	2dd  删除2行
	3p  粘贴文本3次
	100idesu[esc] 重复插入desu100次
	. 重复上一个命令 100desu 
	3. 重复3次“desu" 而不是300

更强
	你要让你的光标移动更有效率，你一定要了解下面的这些命令，千万别跳过
	N G 到第N行 一般写：137
	gg 到第一行
	G 到最后一行
	按单词移动：
	1： w 到下一个单词的开头
	2： e 到下一个单词的结尾
	默认的单词由小写的e,w  默认单词由字母，数字，下划线组成
	如果单词划分由blank字符（空格，tab,换行，回车等）区分，
	则需要使用大写的E和W.
	下面，让我来说说最强的光标移动：
	%  匹配括号移动，包括（，{，[
	* 和 #： 匹配光标当前所在的单词，移动光标到下一个（或上一个）
	匹配单词（*是下一个，#是上一个）
	相信我，上面这三个命令对程序员来说是相当强大的。

更快
	你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令
	连动。很多命令都可以如下来干：
	<开始位置>命令<结束位置>
	例如0y$命令意味着：
	0 先到行头
	y 从这里开始拷贝
	$ 拷贝到本行最后一个字符

	注意： 0 ， y , $是三个命令vim分别执行的
	可以输入ye,从当前位置拷贝到本单词的最后一个字符。

	你也可以输入y2/foo来拷贝2个”foo"之间的字符串。

	还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：
	d :删除
	v: 可视化的选择
	gU: 变大写
	gu: 变小写
	等等

vim操作记忆
	x 删除当前光标单个字符 = dl
	X 删除左边一个字符 = dh
	D 删除到行尾 = d$
	C 修改到行尾 = c$
	s 修改一个字符 = cl
	S 修改一行 = cc
	r 替换一个字符，类似修改，但不进入insert模式

	(终端清除刚输入的命令ctrl+u到行首，ctrl+k到行尾,ctrl+w可以向前删除一个单词）
	 (iterm切换窗口快捷键ctrl + n)

	 查找 / ? n N * # (*#使用了词首和词尾进行区分)
	 /\<the\> 匹配单独的单词the 
	 %会自动查找到(),[],{},进行匹配
	 gg是文件头，G是文件尾
	 而视野中的光标跳转为H(Home),M(middle),L(last)


	 标记 用完G后，跳回原位，可以用单引号''跳到上次光标停留的位置
	 光标跳转到本行以外的地方称为一次跳转，
	 (如G,gg,/,n,但j,k,w,e,fx,tx都不是跳转
	  fx表示在本行向光标右边查找字符x
	  Fx与fx方向相反
	  tx表示在本行向光标右边查找字符x,光标停在x前的一个字符处,t即to
	  Tx与tx方向相反
	  可以通过命令;重复查找，命令,反向重复)

	 .会重复最后一次修改操作
	 如f< df> f< . f< .即可以重复删除<>的标签内容
	 u是撤销，ctrl+r重做
	 可视模式v,V,ctrl+v
	 可视模式下可以按o在已选择块中进行光标跳转，从而实现双向选择
	 p会将内容粘贴到光标的下一行
	 P与p相反，内容会被粘贴到上一行
	 (交换2个字符 xp)
	 除了操作符如x,c,s,r和可视模式外,还有第3种修改的方法：
	 文本对象
	 daw 删除一个单词，aw = A word 即delete A word
	 光标在单词中间也可以删除，即它是对光标所在的文本对象进行操作
	 diw 删除一个单词，但不包括空白符
	 它是作为一个整体，光标的位置是无所谓的
	 IS = INNER SENTENCE 
	 如cis 会修改一个句子，它不包括句子后的空白符
	 as也是所在的句子，但它包括空白符，das即可删除该句子，包括空白符
	 R可以转换成替换模式

.vimrc文件配置
	set ruler 光标所在页面百分比和位置
	backspace 插入模式下可以用删除键
	autoread vim外修改了文件自动加载
	history 命令行历史命令记录数
	noswapfile 去掉swapfile
	autoindent 自动缩进
	nowrap 去掉自动换行
	scrolloff=8 向下滚动时离底线8行即开始滚动
	incsearch 正向搜索
	hlsearch 高亮搜索
	ignorecase 搜索时忽略大小写
	hidden 不退出buffer切换buffer?
	syntax on 语法高亮
	helplang=cn 帮助文档变成中文

	同时编辑多个文件
	可以用:next切换文件
	可以用ctrl+^键进行快速切换文件
	利用标记
	'"可以回到离开该文件的位置
	'.可以回到该文件最后的修改位置

	vim -R file以只读模式打开文件,但它仍然可以用!覆盖
	vim -M file就是只读，此时想修改需要执行set modifiable, set write(没有绝对不能改的。。。）
	这样看，还是-R就够了。

	用:%s/four/4/g可以替换four为4，%表示在所有行中执行替换
	/g表示找到的匹配全部替换，即全局的，和perl相似
	单词统计：g,Ctrl+g

	ctrl+p 自动补全
	ctrl+o 可以在插入模式中执行一次普通模式下的命令，执行完后仍然停留在插入模式中，
	可以用来删除某几行或修改,或者存进寄存器,或者进入可视模式。
	总体来说，还是用D删除到行尾或dd直接删除这一行（效果同S).
	ctrl+o,j 也非常好用

折叠
	zfap  zf=z folder ap 创建一个折叠
	zo    z open 打开一个折叠
	zc    z close 关闭一个折叠 
	zi    打开或关闭所有折叠
	za    打开光标所在折叠
	zA    递归打开光标所在折叠

	:set foldmethod=indent
	:set foldlevel=0 代表所有fold都会折叠
    ,w 代表:w! 可以不退出快速保存
    在可视模式下按*或#可以查找选中的块内容
    ,enter(CR)可以在搜索完后去除高亮

git命令
        git diff  显示工作区和仓库的区别
	git status 显示当前git状态 
	status: 
	untracked, unmodified, modified, staged
	修改完后需要暂存变成已暂存状态才能进行提交，用-am可以跳过暂存状态
	git pull 拉代码
	git commit -am "注释"  不暂存直接提交，-m是注释
	git push   推送
	git commit 本身是将暂存的文件提交  -a 是add的缩写 -m 是message的缩写
	git add 可以将未跟踪的文件进行跟踪，也可以将已经跟踪的文件进行暂存

翻页
        ctrl+f forward  向后翻一页
	ctrl+b backward向前翻一页
	tab键用不了了。。。
	ctrl+d down  向下翻半页
	ctrl+u up    向上翻半夜
	zz   光标所在行居中
	zt  top 光标所在行移动到第一行
	zb  bottom 光标所在行移动到最后一行

